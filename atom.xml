<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WenKa Blog</title>
  <subtitle>文卡 博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wenka.github.io/"/>
  <updated>2016-12-23T12:53:42.455Z</updated>
  <id>https://wenka.github.io/</id>
  
  <author>
    <name>文卡</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java反射</title>
    <link href="https://wenka.github.io/2016/12/23/java_reflect/"/>
    <id>https://wenka.github.io/2016/12/23/java_reflect/</id>
    <published>2016-12-23T11:28:41.000Z</published>
    <updated>2016-12-23T12:53:42.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java反射"><a href="#java反射" class="headerlink" title="java反射"></a>java反射</h1><h3 id="1、什么是反射？"><a href="#1、什么是反射？" class="headerlink" title="1、什么是反射？"></a>1、什么是反射？</h3><pre><code>JAVA 反射机制是在运行状态中，对与一个类或者对象，都能获取并操作它所有的属性和方法。
</code></pre><h3 id="2、反射用来干什么？"><a href="#2、反射用来干什么？" class="headerlink" title="2、反射用来干什么？"></a>2、反射用来干什么？</h3><pre><code>判断任意一个对象所属的类；调用其构造方法构造类的实例；获取、操作任意一个类所具
有的成员变量和方法；在运行时调用任意一个对象的方法等。
</code></pre><h3 id="3、怎么用呢？"><a href="#3、怎么用呢？" class="headerlink" title="3、怎么用呢？"></a>3、怎么用呢？</h3><p>首先我们先创建一个普通的 Demo 类。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">package com.wenka.reflect;</div><div class="line">public class Demo &#123;</div><div class="line">	public Demo() &#123;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>####3.1 获取 Class<br><strong>三种方式获取 Class 对象：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Class&lt;?&gt; demo1 = null;</div><div class="line">Class&lt;?&gt; demo2 = null;</div><div class="line">Class&lt;?&gt; demo3 = null;</div></pre></td></tr></table></figure>
<ul>
<li><strong>① 通过 Class 类的静态方法 forName(String className)，参数为需要获取 Class 的类的</strong>全类名<strong>。</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">demo1 = Class.forName(&quot;com.wenka.reflect.Demo&quot;);</div></pre></td></tr></table></figure>
<p>注意：这里 ClassNotFoundException  异常需要处理，由于我们只是测试用，所以在这里选择上抛。<br>-<strong>② 从此类的实例中获取</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">demo2 = new Demo().getClass();</div></pre></td></tr></table></figure>
<p>-<strong>② 从类名中获取</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">demo3 = Demo.class;</div></pre></td></tr></table></figure>
<p>-<strong>输出结果：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">demo1：class com.wenka.reflect.Demo</div><div class="line">demo2：class com.wenka.reflect.Demo</div><div class="line">demo3：class com.wenka.reflect.Demo</div></pre></td></tr></table></figure>
<p>####3.2 获取到 Class 有什么用呢？？<br>相信对于初学者也如当初的我一样，不知道接下来能干什么？这时，我们看一下 JavaAPI：java.lang.Class&lt;<em>T</em>&gt; 这个类。没错，我们可以通过它获取各种方法、各种属性等。</p>
<ul>
<li><strong>① 在此之前先创建一个 Person 类方便测试</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">package com.wenka.reflect;</div><div class="line"></div><div class="line">public class Person &#123;</div><div class="line"></div><div class="line">	//两个私有属性</div><div class="line">	private String name;</div><div class="line">	private Integer age;</div><div class="line"></div><div class="line">	//两个私有属性的 getter/setter 方法</div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Integer getAge() &#123;</div><div class="line">		return age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setAge(Integer age) &#123;</div><div class="line">		this.age = age;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	//重写 toString() 方法输出测试。</div><div class="line">	@Override</div><div class="line">	public String toString() &#123;</div><div class="line">		return &quot;Person [name=&quot; + name + &quot;, age=&quot; + age + &quot;]&quot;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//写了四个构造方法：一个两参的，一个public一参的，一个private一参的，一个无参的。</div><div class="line">	public Person(String name, Integer age) &#123;</div><div class="line">		super();</div><div class="line">		this.name = name;</div><div class="line">		this.age = age;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Person(String name) &#123;</div><div class="line">		this(name, 20);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@SuppressWarnings(&quot;unused&quot;)</div><div class="line">	private Person(Integer age) &#123;</div><div class="line">		this(&quot;zhangsan&quot;, age);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Person() &#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//两个私有方法：有参 work(int hours)、 无参 salary()</div><div class="line">	@SuppressWarnings(&quot;unused&quot;)</div><div class="line">	private void work(int hours) &#123;</div><div class="line">		System.out.println(name + &quot;工作了&quot; + hours + &quot;个小时&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@SuppressWarnings(&quot;unused&quot;)</div><div class="line">	private double salary() &#123;</div><div class="line">		return 5000;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>② 获取构造方法</strong></p>
<ul>
<li><p>获取 Class</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class&lt;?&gt; demo = Class.forName(&quot;com.wenka.reflect.Person&quot;);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<pre><code>- 通过 API 发现有两个获取所有构造参数的方法。
</code></pre><p><strong>getConstructors()</strong> 和 <strong>getDeclaredConstructors()</strong><br>通过对比发现：getConstructors()：不能获取到类的私有构造方法，而 getDeclaredConstructors() 则可以获取到所有的构造方法。</p>
<pre><code>- 获取到指定的构造方法：
- getConstructor(Class&lt;*?*&gt;... parameterTypes) 和 getConstructor(Class&lt;*?*&gt;... parameterTypes) 
</code></pre><p>参数列表为想要的获取的那个构造方法所对应的参数列表<br>楼主在此获取得到 public 参数列表为 String 的构造方法。通过调用 Constructor&lt;<em>T</em>&gt; 中的 newInstance(Object… initargs)  方法创建实例。此方法的参数列表就是对应的构造方法的参数列表的实参。</p>
<pre><code>    `Person person = 
    (Person) demo.getConstructor(String.class).newInstance(&quot;wangwu&quot;);
    `
- 在此就有了疑问，既然我们可以通过 getDeclaredConstructor(Class&lt;*?*&gt;... parameterTypes) 获取到 **私有**的方法，那我们是不是也能通过此种办法，使得我们可以利用私有**构造方法**来创建实例？

 `Constructor&lt;?&gt; constructor = demo.getDeclaredConstructor(Integer.class);`

 没错，我们通过此方法获取到了私有构造方法，但是我们直接通过此创建实例会有异常：
    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.lang.IllegalAccessException: Class com.wenka.reflect.MainClass can not access a member of class com.wenka.reflect.Person with modifiers &quot;private&quot;</div></pre></td></tr></table></figure>

意思是说：这个构造方法是 “private”的，我们不能访问。但是，不要灰心，自习看了一下 Constructor&lt;*T*&gt; 类，Field、Method 和 Constructor 对象的基类为 **AccessibleObject** 类，这个类是干什么呢？
**它提供了将反射的对象标记为在使用时取消默认 Java 语言访问控制检查的能力。**哦，原来这个类可以取消 Java 语言的访问控制检查的能力啊。这就好办了。我们讲刚得到的私有构造方法
</code></pre><p>调用 setAccessible(boolean flag) 方法。将此方法设置为 false，使其取消反射的对象实施 Java 语言访问检查。<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">constructor.setAccessible(true);</div></pre></td></tr></table></figure></p>
<pre><code>到此：

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Object newInstance = constructor.newInstance(20);</div><div class="line">System.out.println(newInstance);</div></pre></td></tr></table></figure>

输出：

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person [name=zhangsan, age=20]</div></pre></td></tr></table></figure>

如果只能通过无参的构造方法来创建实例就比较简单了：当然前提是一定要有无参构造。
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Person person = (Person) Demo.newInstance();</div><div class="line">			person.setAge(20);</div><div class="line">			person.setName(&quot;A&quot;);</div><div class="line">			System.out.println(person);</div></pre></td></tr></table></figure>
</code></pre><ul>
<li><p><strong>③ 获取字段</strong></p>
<ul>
<li>获取所有字段，与获取构造方法类似。调用 <strong>getDeclaredFields()</strong> 或者 <strong>getFields() </strong></li>
<li><p>获取指定字段并赋值。<strong>getDeclaredField(String name) </strong>参数：字段名。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Field field = demo.getDeclaredField(&quot;age&quot;);</div><div class="line">field.setAccessible(true);</div></pre></td></tr></table></figure>
<p>  为字段设置新值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Person person = new Person(&quot;AAAAAA&quot;);</div><div class="line">//field.set(obj, value);给 obj 对象的此属性设置 value 新值</div><div class="line">field.set(person, 100);</div><div class="line">System.out.println(person)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>④ 获取方法</strong></p>
<ul>
<li>获取所有方法：<strong>getMethods()</strong>和 <strong>getDeclaredMethods();</strong></li>
<li><p>获取指定的方法：（在此依旧是获取 private 的方法，其它方法类似。）</p>
<ul>
<li>当初我们创建的实体类中有 两个私有方法：有参 work(int hours)、 无参 salary()</li>
</ul>
<p><strong>getDeclaredMethod(String name, Class&lt;<em>?</em>&gt;… parameterTypes)</strong>：参数列表为：1.方法名，2. 对应方法的参数列表的类型，0个 或者 多个。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Method work = demo.getDeclaredMethod(&quot;work&quot;, int.class);</div><div class="line">			System.out.println(work);</div><div class="line">work.setAccessible(true);</div><div class="line">Person person = new Person(&quot;AAAA&quot;);</div><div class="line">// invoke(Object obj, Object... args) </div><div class="line">work.invoke(person, 10);</div></pre></td></tr></table></figure>
<p> 输出结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">private void com.wenka.reflect.Person.work(int)</div><div class="line">AAAA工作了10个小时</div></pre></td></tr></table></figure>
<p>Method 类中的 <strong>invoke(Object obj, Object… args)</strong> 方法，<strong>对带有指定参数的指定对象调用由此 Method 对象表示的底层方法。</strong> 参数：1.指定对象 2.对应参数列表的实参。</p>
<ul>
<li><p>倘若方法有返回值，则直接返回：</p>
<p><code>Method salary = demo.getDeclaredMethod(&quot;salary&quot;);
   salary.setAccessible(true);
   Object invoke = salary.invoke(person);
   System.out.println(&quot;得到了工资：&quot; + invoke);</code></p>
</li>
</ul>
<p>结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">得到了工资：5000.0</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>致此：反射的简单用法都已经写完了，可以发现，反射很强大的，我们甚至可以通过反射使 单例 不再单例，通过反射获取注释，接口等关于此类的所有信息，并从底层操作。未来学习的框架都运用了反射的原理来实现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java反射&quot;&gt;&lt;a href=&quot;#java反射&quot; class=&quot;headerlink&quot; title=&quot;java反射&quot;&gt;&lt;/a&gt;java反射&lt;/h1&gt;&lt;h3 id=&quot;1、什么是反射？&quot;&gt;&lt;a href=&quot;#1、什么是反射？&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="Java" scheme="https://wenka.github.io/categories/Java/"/>
    
    
      <category term="Java 反射" scheme="https://wenka.github.io/tags/Java-%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://wenka.github.io/2016/12/21/hello-world/"/>
    <id>https://wenka.github.io/2016/12/21/hello-world/</id>
    <published>2016-12-21T14:41:19.830Z</published>
    <updated>2016-12-21T14:41:19.838Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
